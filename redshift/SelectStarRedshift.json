{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Stack to enable integration Select Star with Redshift",
    "Parameters": {
        "Cluster": {
            "Type": "String",
            "AllowedPattern": "[\\w-]+",
            "Description": "Also known as \"Cluster identifier\" by AWS."
        },
        "Grant": {
            "Description": "Comma separated list of Redshift database to grant access for Select Star. Accept \"*\" for all databases.",
            "Type": "CommaDelimitedList",
            "Default": "*"
        },
        "Db": {
            "Description": "Database used for provisioning connection by Select Star.",
            "Type": "String"
        },
        "DbUser": {
            "Type": "String",
            "Default": "awsuser",
            "Description": "Redshift user used to connection for provision access for Select Star. This user is used only by CloudFormation for the purposes of eg. creating a user account with minimal rights, including without access to data necessary for integration.",
            "AllowedPattern": ".+"
        },
        "ExternalId": {
            "Description": "The Select Star external ID to authenticate your AWS account. Do not change or share this.",
            "MinLength": "1",
            "Type": "String"
        },
        "IamPrincipal": {
            "Description": "The Select Star IAM principal which has permission to your AWS account. Do not change this.",
            "MinLength": "1",
            "Type": "String"
        },
        "CidrIpPrimary": {
            "Description": "The Select Star primary address range that will gain network access to the Redshift cluster. Do not change this.",
            "Type": "String",
            "Default": "3.23.108.85/32",
            "AllowedValues": [
                "3.23.108.85/32",
                "3.20.56.105/32",
                "0.0.0.0/0"
            ]
        },
        "CidrIpSecondary": {
            "Description": "The Select Star secondary address range that will gain network access to the Redshift cluster. Do not change this.",
            "Type": "String",
            "Default": "3.20.56.105/32",
            "AllowedValues": [
                "3.23.108.85/32",
                "3.20.56.105/32",
                "0.0.0.0/0"
            ]
        },
        "ConfigureS3Logging": {
            "Type": "String",
            "AllowedValues": [
                "true",
                "false"
            ],
            "Description": "If true and logging disabled then the Redshift cluster configuration can be changed to enable S3 logging. It is recommended to set the value \"true\"."
        },
        "ConfigureS3LoggingRestart": {
            "Type": "String",
            "AllowedValues": [
                "true",
                "false"
            ],
            "Description": "If true and logging changes made then the Redshift cluster can be restarted to apply changes. It is recommended to set the value \"true\"."
        },
        "ConfigureNetwork": {
            "Type": "String",
            "Default": "false",
            "AllowedValues": [
                "true",
                "false"
            ],
            "Description": "The default AWS Redshfit configuration requires the instance to be public to access metadata. If true then we verify that the Redshift instance is public and configure VPC security group rules to allow access. Do not change this parameter unless you have been specifically instructed otherwise by the support team.\n\nTo connect to an private instance, contact the support team to select the optimal connectivity solution."
        },
        "SentryDsn": {
            "Description": "URL for reporting any errors in provisioning execution. Don't change it unless you really know what you are doing.",
            "Type": "String",
            "Default": "https://14d65555628a4b6f84fcb83ef1511778@o407979.ingest.sentry.io/6639248"
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Redshift configuration"
                    },
                    "Parameters": [
                        "Cluster",
                        "Grant",
                        "Db",
                        "DbUser"
                    ]
                },
                {
                    "Label": {
                        "default": "Provisioning"
                    },
                    "Parameters": [
                        "ConfigureS3Logging",
                        "ConfigureS3LoggingRestart",
                        "ConfigureNetwork"
                    ]
                },
                {
                    "Label": {
                        "default": "Read-only. Do not change this."
                    },
                    "Parameters": [
                        "ExternalId",
                        "IamPrincipal",
                        "CidrIpPrimary",
                        "CidrIpSecondary"
                    ]
                }
            ],
            "ParameterLabels": {
                "Cluster": {
                    "default": "Redshift cluster name"
                },
                "Db": {
                    "default": "Redshift connection databases"
                },
                "Grant": {
                    "default": "Redshift granted access databases"
                },
                "ConfigureS3Logging": {
                    "default": "Configure S3 logging (if disabled)"
                },
                "ConfigureS3LoggingRestart": {
                    "default": "Restart Cluster (if necessary to apply changes)"
                },
                "ConfigureNetwork": {
                    "default": "Configure network access"
                }
            }
        }
    },
    "Conditions": {
        "CreateS3Bucket": {
            "Fn::Equals": [
                {
                    "Ref": "ConfigureS3Logging"
                },
                "true"
            ]
        },
        "CreateVPCRules": {
            "Fn::Equals": [
                {
                    "Ref": "ConfigureNetwork"
                },
                "true"
            ]
        }
    },
    "Resources": {
        "LoggingBucket": {
            "Type": "AWS::S3::Bucket",
            "Condition": "CreateS3Bucket",
            "DeletionPolicy": "Retain",
            "Properties": {
                "AccessControl": "Private",
                "PublicAccessBlockConfiguration": {
                    "BlockPublicAcls": true,
                    "BlockPublicPolicy": true,
                    "IgnorePublicAcls": true,
                    "RestrictPublicBuckets": true
                }
            }
        },
        "LoggingBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Condition": "CreateS3Bucket",
            "DeletionPolicy": "Retain",
            "Properties": {
                "Bucket": {
                    "Ref": "LoggingBucket"
                },
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Resource": [
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:s3:::",
                                            {
                                                "Ref": "LoggingBucket"
                                            }
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:s3:::",
                                            {
                                                "Ref": "LoggingBucket"
                                            },
                                            "/*"
                                        ]
                                    ]
                                }
                            ],
                            "Principal": {
                                "Service": "redshift.amazonaws.com"
                            },
                            "Action": [
                                "s3:PutObject",
                                "s3:GetBucketAcl"
                            ],
                            "Condition": {
                                "StringEquals": {
                                    "aws:SourceArn": {
                                        "Fn::Sub": "arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:cluster:${Cluster}"
                                    }
                                }
                            }
                        }
                    ]
                }
            }
        },
        "LambdaBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "AccessControl": "Private"
            }
        },
        "CrossAccountRolePolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "redshift:DescribeClusters",
                                "redshift:DescribeLoggingStatus",
                                "redshift:ListSchemas",
                                "redshift:ListTables",
                                "redshift:ListDatabases",
                                "redshift:ExecuteQuery",
                                "redshift:FetchResults",
                                "redshift:DescribeClusters",
                                "redshift:CancelQuery",
                                "redshift:DescribeQuery",
                                "redshift:DescribeTable",
                                "redshift:ViewQueriesFromConsole"
                            ],
                            "Resource": {
                                "Fn::Sub": "arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:cluster:${Cluster}"
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "redshift:GetClusterCredentials"
                            ],
                            "Resource": {
                                "Fn::Sub": "arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:dbuser:${Cluster}/selectstar"
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "redshift:GetClusterCredentials"
                            ],
                            "Resource": {
                                "Fn::GetAtt": [
                                    "LambdaTransform",
                                    "result"
                                ]
                            }
                        },
                        {
                            "Sid": "DataAPIPermissions",
                            "Action": [
                                "redshift-data:ExecuteStatement",
                                "redshift-data:ListDatabases",
                                "redshift-data:ListSchemas",
                                "redshift-data:ListTables",
                                "redshift-data:DescribeTable"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Sub": "arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:cluster:${Cluster}"
                            }
                        },
                        {
                            "Sid": "DataAPIIAMSessionPermissionsRestriction",
                            "Action": [
                                "redshift-data:GetStatementResult",
                                "redshift-data:CancelStatement",
                                "redshift-data:DescribeStatement",
                                "redshift-data:ListStatements"
                            ],
                            "Effect": "Allow",
                            "Resource": "*"
                        },
                        {
                            "Sid": "ListObjectsInBucket",
                            "Effect": "Allow",
                            "Action": [
                                "s3:GetLifecycleConfiguration",
                                "s3:GetBucketTagging",
                                "s3:GetInventoryConfiguration",
                                "s3:GetObjectVersionTagging",
                                "s3:ListBucketVersions",
                                "s3:GetBucketLogging",
                                "s3:GetBucketPolicy",
                                "s3:GetBucketOwnershipControls",
                                "s3:GetBucketPublicAccessBlock",
                                "s3:GetBucketPolicyStatus",
                                "s3:ListBucketMultipartUploads",
                                "s3:GetBucketVersioning",
                                "s3:GetBucketAcl",
                                "s3:ListMultipartUploadParts",
                                "s3:GetObject",
                                "s3:GetBucketLocation",
                                "s3:GetObjectVersion",
                                "s3:ListBucket"
                            ],
                            "Resource": [
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:s3:::",
                                            {
                                                "Fn::GetAtt": [
                                                    "LambdaProvision",
                                                    "LoggingBucket"
                                                ]
                                            }
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:s3:::",
                                            {
                                                "Fn::GetAtt": [
                                                    "LambdaProvision",
                                                    "LoggingBucket"
                                                ]
                                            },
                                            "/*"
                                        ]
                                    ]
                                }
                            ]
                        },
                        {
                            "Action": [
                                "logs:Get*",
                                "logs:List*",
                                "logs:StartQuery",
                                "logs:StopQuery",
                                "logs:Describe*",
                                "logs:FilterLogEvents"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/redshift/cluster/${Cluster}/*"
                            }
                        },
                        {
                            "Action": [
                                "logs:GetQueryResults",
                                "logs:DescribeLogGroups"
                            ],
                            "Effect": "Allow",
                            "Resource": "arn:aws:logs:*:*:log-group::log-stream:"
                        }
                    ]
                },
                "PolicyName": "EnableSelectStarAccess",
                "Roles": [
                    {
                        "Ref": "CrossAccountRole"
                    }
                ]
            }
        },
        "CrossAccountRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": {
                                    "Ref": "IamPrincipal"
                                }
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Condition": {
                                "StringEquals": {
                                    "sts:ExternalId": {
                                        "Ref": "ExternalId"
                                    }
                                }
                            }
                        }
                    ]
                }
            }
        },
        "LambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    "arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess"
                ]
            }
        },
        "LambdaRolePolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "s3:GetObject",
                            "Resource": "arn:aws:s3:::cf-templates-pp3cips1o7jf-us-east-2/redshift/deployment-package.zip"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "redshift:DescribeClusters",
                                "redshift:DescribeLoggingStatus",
                                "redshift:DescribeClusterParameters",
                                "redshift:DescribeClusterParameterGroups",
                                "redshift:CreateClusterParameterGroup",
                                "redshift:EnableLogging",
                                "redshift:ModifyClusterIamRoles",
                                "redshift:ModifyClusterParameterGroup",
                                "redshift:ModifyCluster",
                                "redshift:RebootCluster",
                                "redshift:GetClusterCredentials",
                                "redshift-data:ExecuteStatement",
                                "redshift-data:ListDatabases"
                            ],
                            "Resource": [
                                {
                                    "Fn::Sub": "arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:dbuser:${Cluster}/${DbUser}"
                                },
                                {
                                    "Fn::Sub": "arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:dbname:${Cluster}/*"
                                },
                                {
                                    "Fn::Sub": "arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:cluster:${Cluster}"
                                },
                                {
                                    "Fn::Sub": "arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:parametergroup:*"
                                }
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "redshift-data:DescribeStatement",
                                "redshift:DescribeClusterParameterGroups"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": "iam:PassRole",
                            "Resource": {
                                "Fn::GetAtt": [
                                    "CrossAccountRole",
                                    "Arn"
                                ]
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": "s3:*",
                            "Resource": [
                                {
                                    "Fn::Sub": [
                                        "arn:aws:s3:::${BucketName}",
                                        {
                                            "BucketName": {
                                                "Ref": "LambdaBucket"
                                            }
                                        }
                                    ]
                                },
                                {
                                    "Fn::Sub": [
                                        "arn:aws:s3:::${BucketName}/*",
                                        {
                                            "BucketName": {
                                                "Ref": "LambdaBucket"
                                            }
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Action": "*",
                            "Resource": [
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:s3:::",
                                            {
                                                "Ref": "LoggingBucket"
                                            }
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:s3:::",
                                            {
                                                "Ref": "LoggingBucket"
                                            },
                                            "/*"
                                        ]
                                    ]
                                }
                            ]
                        }
                    ]
                },
                "PolicyName": "EnableSelectStarProvisioning",
                "Roles": [
                    {
                        "Ref": "LambdaRole"
                    }
                ]
            }
        },
        "LambdaProvisionFunction": {
            "Type": "AWS::Lambda::Function",
            "DependsOn": [
                "LambdaRolePolicy"
            ],
            "Properties": {
                "Timeout": 300,
                "Code": {
                    "Fn::GetAtt": [
                        "LambdaCopy",
                        "Copy"
                    ]
                },
                "Environment": {
                    "Variables": {
                        "SENTRY_DSN": {
                            "Ref": "SentryDsn"
                        }
                    }
                },
                "Handler": "provision.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaRole",
                        "Arn"
                    ]
                },
                "Runtime": "python3.9",
                "TracingConfig": {
                    "Mode": "Active"
                }
            }
        },
        "LambdaProvision": {
            "Type": "Custom::LambdaProvision",
            "Version": "1.0",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "LambdaProvisionFunction",
                        "Arn"
                    ]
                },
                "RedshiftRole": {
                    "Fn::GetAtt": [
                        "CrossAccountRole",
                        "Arn"
                    ]
                },
                "Bucket": {
                    "Fn::If": [
                        "CreateS3Bucket",
                        {
                            "Ref": "LoggingBucket"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "Cluster": {
                    "Ref": "Cluster"
                },
                "Db": {
                    "Ref": "Db"
                },
                "Grant": {
                    "Ref": "Grant"
                },
                "DbUser": {
                    "Ref": "DbUser"
                },
                "Region": {
                    "Fn::Sub": "${AWS::Region}"
                },
                "ConfigureS3Logging": {
                    "Ref": "ConfigureS3Logging"
                },
                "ConfigureS3LoggingRestart": {
                    "Ref": "ConfigureS3LoggingRestart"
                },
                "ConfigureNetwork": {
                    "Ref": "ConfigureNetwork"
                }
            }
        },
        "LambdaTransformFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Timeout": 300,
                "Code": {
                    "Fn::GetAtt": [
                        "LambdaCopy",
                        "Copy"
                    ]
                },
                "Handler": "transform.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaRole",
                        "Arn"
                    ]
                },
                "Environment": {
                    "Variables": {
                        "SENTRY_DSN": {
                            "Ref": "SentryDsn"
                        }
                    }
                },
                "Runtime": "python3.9",
                "TracingConfig": {
                    "Mode": "Active"
                }
            }
        },
        "LambdaTransform": {
            "Type": "Custom::LambdaTransform",
            "Version": "1.0",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "LambdaTransformFunction",
                        "Arn"
                    ]
                },
                "Items": {
                    "Ref": "Grant"
                },
                "Prefix": {
                    "Fn::Sub": "arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:dbname:${Cluster}/"
                }
            }
        },
        "LambdaCopyFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Timeout": 300,
                "Code": {
                    "ZipFile": "import json\nimport logging\nimport cfnresponse\nimport boto3\n\nlogging.basicConfig(\n    format=\"%(asctime)s,%(msecs)d %(levelname)-8s [%(filename)s:%(lineno)d] %(message)s\",\n    datefmt=\"%Y-%m-%d:%H:%M:%S\",\n    level=logging.INFO,\n)\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\ns3_client = boto3.client(\"s3\")\n\n\ndef handler(event, context):\n    logger.info(json.dumps(event))\n    try:\n        properties = event[\"ResourceProperties\"]\n        srcBucket = properties[\"srcBucket\"]\n        srcKey = properties[\"srcKey\"]\n        dstBucket = properties[\"dstBucket\"]\n        dstKey = properties[\"dstKey\"]\n        if event[\"RequestType\"] == \"Delete\":\n            s3_client.delete_object(\n                Bucket=dstBucket,\n                Key=dstKey,\n            )\n            cfnresponse.send(\n                event, context, cfnresponse.SUCCESS, {\"Data\": \"Delete complete\"}\n            )\n        else:\n            s3_client.copy_object(\n                Bucket=dstBucket,\n                CopySource=f\"{srcBucket}/{srcKey}\",\n                Key=dstKey,\n            )\n            return cfnresponse.send(\n                event,\n                context,\n                cfnresponse.SUCCESS,\n                {\n                    \"result\": \"Copy complete\",\n                    \"Copy\": {\"S3Bucket\": dstBucket, \"S3Key\": dstKey},\n                },\n                reason=\"Create complete\",\n            )\n    except Exception as e:\n        logging.error(e)\n        return cfnresponse.send(\n            event,\n            context,\n            cfnresponse.FAILED,\n            {},\n            reason=\"Something failed. See the details in CloudWatch Log Stream: {}\".format(\n                context.log_stream_name\n            ),\n        )\n"
                },
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaRole",
                        "Arn"
                    ]
                },
                "Runtime": "python3.9",
                "TracingConfig": {
                    "Mode": "Active"
                }
            }
        },
        "LambdaCopy": {
            "Type": "Custom::LambdaCopy",
            "DependsOn": [
                "LambdaRolePolicy"
            ],
            "Version": "1.0",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "LambdaCopyFunction",
                        "Arn"
                    ]
                },
                "srcBucket": "cf-templates-pp3cips1o7jf-us-east-2",
                "srcKey": "redshift/deployment-package.zip",
                "dstBucket": {
                    "Ref": "LambdaBucket"
                },
                "dstKey": "deployment-package.zip"
            }
        },
        "InboundPrimaryRule": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Condition": "CreateVPCRules",
            "Properties": {
                "IpProtocol": "tcp",
                "Description": {
                    "Fn::Sub": "Authorize primary Select Star address range to access Redshift cluster: ${Cluster}"
                },
                "FromPort": {
                    "Fn::GetAtt": [
                        "LambdaProvision",
                        "EndpointPort"
                    ]
                },
                "ToPort": {
                    "Fn::GetAtt": [
                        "LambdaProvision",
                        "EndpointPort"
                    ]
                },
                "CidrIp": {
                    "Ref": "CidrIpPrimary"
                },
                "GroupId": {
                    "Fn::GetAtt": [
                        "LambdaProvision",
                        "SecurityGroupId"
                    ]
                }
            }
        },
        "InboundSecondaryRule": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Condition": "CreateVPCRules",
            "Properties": {
                "IpProtocol": "tcp",
                "Description": {
                    "Fn::Sub": "Authorize secondary Select Star addresss range to access Redshift cluster ${Cluster}"
                },
                "FromPort": {
                    "Fn::GetAtt": [
                        "LambdaProvision",
                        "EndpointPort"
                    ]
                },
                "ToPort": {
                    "Fn::GetAtt": [
                        "LambdaProvision",
                        "EndpointPort"
                    ]
                },
                "CidrIp": {
                    "Ref": "CidrIpSecondary"
                },
                "GroupId": {
                    "Fn::GetAtt": [
                        "LambdaProvision",
                        "SecurityGroupId"
                    ]
                }
            }
        }
    },
    "Outputs": {
        "RoleArn": {
            "Value": {
                "Fn::GetAtt": [
                    "CrossAccountRole",
                    "Arn"
                ]
            },
            "Description": "The ARN value of the Cross-Account Role with IAM read-only permissions. Add this ARN value to Select Star."
        }
    }
}
